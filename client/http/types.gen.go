// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AllergyCriticality.
const (
	High           AllergyCriticality = "high"
	Low            AllergyCriticality = "low"
	UnableToAssess AllergyCriticality = "unable-to-assess"
)

// Defines values for EncounterWithRoleRole.
const (
	Primary EncounterWithRoleRole = "primary"
	Related EncounterWithRoleRole = "related"
)

// Defines values for ErrorResponseErrorCode.
const (
	FHIRVALIDATIONFAILED ErrorResponseErrorCode = "FHIR_VALIDATION_FAILED"
	IDEMPOTENCYCONFLICT  ErrorResponseErrorCode = "IDEMPOTENCY_CONFLICT"
	MESHUPSTREAMERROR    ErrorResponseErrorCode = "MESH_UPSTREAM_ERROR"
	SENDTIMEOUT          ErrorResponseErrorCode = "SEND_TIMEOUT"
	SERVICEUNAVAILABLE   ErrorResponseErrorCode = "SERVICE_UNAVAILABLE"
	VALIDATIONERROR      ErrorResponseErrorCode = "VALIDATION_ERROR"
)

// Defines values for MedicationSuppliedStatus.
const (
	MedicationSuppliedStatusCompleted      MedicationSuppliedStatus = "completed"
	MedicationSuppliedStatusDeclined       MedicationSuppliedStatus = "declined"
	MedicationSuppliedStatusEnteredInError MedicationSuppliedStatus = "entered-in-error"
	MedicationSuppliedStatusInProgress     MedicationSuppliedStatus = "in-progress"
	MedicationSuppliedStatusOnHold         MedicationSuppliedStatus = "on-hold"
	MedicationSuppliedStatusPreparation    MedicationSuppliedStatus = "preparation"
	MedicationSuppliedStatusStopped        MedicationSuppliedStatus = "stopped"
	MedicationSuppliedStatusUnknown        MedicationSuppliedStatus = "unknown"
)

// Defines values for NarrativeBlockHeadingCode.
const (
	NarrativeBlockHeadingCodeClinicalSummary           NarrativeBlockHeadingCode = "clinical-summary"
	NarrativeBlockHeadingCodeHistory                   NarrativeBlockHeadingCode = "history"
	NarrativeBlockHeadingCodeInformationAndAdviceGiven NarrativeBlockHeadingCode = "information-and-advice-given"
)

// Defines values for ObservationInputStatus.
const (
	Amended     ObservationInputStatus = "amended"
	Final       ObservationInputStatus = "final"
	Preliminary ObservationInputStatus = "preliminary"
	Registered  ObservationInputStatus = "registered"
)

// Defines values for PatientGender.
const (
	PatientGenderFemale  PatientGender = "female"
	PatientGenderMale    PatientGender = "male"
	PatientGenderOther   PatientGender = "other"
	PatientGenderUnknown PatientGender = "unknown"
)

// Defines values for SubmitAcceptedStatus.
const (
	Accepted SubmitAcceptedStatus = "accepted"
	Queued   SubmitAcceptedStatus = "queued"
	Sending  SubmitAcceptedStatus = "sending"
)

// Allergy defines model for Allergy.
type Allergy struct {
	Code        string              `json:"code"`
	Criticality *AllergyCriticality `json:"criticality,omitempty"`
	Display     *string             `json:"display,omitempty"`
	System      string              `json:"system"`
}

// AllergyCriticality defines model for Allergy.Criticality.
type AllergyCriticality string

// Attachment defines model for Attachment.
type Attachment struct {
	// Base64 Base64-encoded content
	Base64      string  `json:"base64"`
	ContentType string  `json:"contentType"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Author defines model for Author.
type Author struct {
	Identifiers *[]Identifier `json:"identifiers,omitempty"`
	Name        string        `json:"name"`

	// ProfessionalCode Staff professional code
	ProfessionalCode *string          `json:"professionalCode,omitempty"`
	Role             *CodeableConcept `json:"role,omitempty"`
}

// ClinicalSummary defines model for ClinicalSummary.
type ClinicalSummary struct {
	Allergies *[]Allergy `json:"allergies,omitempty"`

	// FreeText Narrative summary; becomes Composition narrative/section text.
	FreeText            string                `json:"freeText"`
	MedicationsSupplied *[]MedicationSupplied `json:"medicationsSupplied,omitempty"`

	// Problems Diagnoses/problems â†’ Condition
	Problems *[]CodedItem `json:"problems,omitempty"`
}

// CodeableConcept defines model for CodeableConcept.
type CodeableConcept struct {
	Code    string  `json:"code"`
	Display *string `json:"display,omitempty"`
	System  string  `json:"system"`
}

// CodedItem defines model for CodedItem.
type CodedItem struct {
	Code    string  `json:"code"`
	Display *string `json:"display,omitempty"`
	System  string  `json:"system"`
	Text    *string `json:"text,omitempty"`
}

// CompositionDetails Document-level metadata for the inner Composition.
type CompositionDetails struct {
	Title *string    `json:"title,omitempty"`
	Type  *CodedItem `json:"type,omitempty"`
}

// Encounter Context of the consultation.
type Encounter struct {
	LocationODS         *string    `json:"locationODS,omitempty"`
	OccurredAt          *time.Time `json:"occurredAt,omitempty"`
	OutcomeOfAttendance *CodedItem `json:"outcomeOfAttendance,omitempty"`
	PerformerODS        *string    `json:"performerODS,omitempty"`

	// Reason Free-text reason (use reasonCode for coded value).
	Reason     *string    `json:"reason,omitempty"`
	ReasonCode *CodedItem `json:"reasonCode,omitempty"`

	// ServiceType Local label for service type.
	ServiceType *string `json:"serviceType,omitempty"`
}

// EncounterWithRole defines model for EncounterWithRole.
type EncounterWithRole struct {
	LocationODS         *string    `json:"locationODS,omitempty"`
	OccurredAt          time.Time  `json:"occurredAt"`
	OutcomeOfAttendance *CodedItem `json:"outcomeOfAttendance,omitempty"`
	PerformerODS        *string    `json:"performerODS,omitempty"`

	// Reason Free-text reason (use reasonCode for coded value).
	Reason     *string    `json:"reason,omitempty"`
	ReasonCode *CodedItem `json:"reasonCode,omitempty"`

	// Role Primary encounter becomes Composition.encounter.
	Role *EncounterWithRoleRole `json:"role,omitempty"`

	// ServiceType Local label for service type.
	ServiceType *string `json:"serviceType,omitempty"`
}

// EncounterWithRoleRole Primary encounter becomes Composition.encounter.
type EncounterWithRoleRole string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code    ErrorResponseErrorCode  `json:"code"`
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error"`
}

// ErrorResponseErrorCode defines model for ErrorResponse.Error.Code.
type ErrorResponseErrorCode string

// Identifier defines model for Identifier.
type Identifier struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// MedicationSupplied defines model for MedicationSupplied.
type MedicationSupplied struct {
	Category          *CodedItem `json:"category,omitempty"`
	DaysSupply        *Quantity  `json:"daysSupply,omitempty"`
	DosageInstruction *struct {
		MaxDosePerPeriod *struct {
			Denominator *Quantity `json:"denominator,omitempty"`
			Numerator   *Quantity `json:"numerator,omitempty"`
		} `json:"maxDosePerPeriod,omitempty"`
		PatientInstruction *string    `json:"patientInstruction,omitempty"`
		Route              *CodedItem `json:"route,omitempty"`
		Text               *string    `json:"text,omitempty"`
		Timing             *struct {
			Frequency  *int     `json:"frequency,omitempty"`
			Period     *float32 `json:"period,omitempty"`
			PeriodUnit *string  `json:"periodUnit,omitempty"`
		} `json:"timing,omitempty"`
	} `json:"dosageInstruction,omitempty"`
	Medication     CodedItem                `json:"medication"`
	Quantity       *Quantity                `json:"quantity,omitempty"`
	Status         MedicationSuppliedStatus `json:"status"`
	SupplyType     *CodedItem               `json:"supplyType,omitempty"`
	WhenHandedOver *openapi_types.Date      `json:"whenHandedOver,omitempty"`
	WhenPrepared   *openapi_types.Date      `json:"whenPrepared,omitempty"`
}

// MedicationSuppliedStatus defines model for MedicationSupplied.Status.
type MedicationSuppliedStatus string

// MessageHeaderOptions defines model for MessageHeaderOptions.
type MessageHeaderOptions struct {
	BusinessAckRequested       *bool   `json:"businessAckRequested,omitempty"`
	InfrastructureAckRequested *bool   `json:"infrastructureAckRequested,omitempty"`
	LocalExtension             *string `json:"localExtension,omitempty"`
	MessageDefinitionRef       *string `json:"messageDefinitionRef,omitempty"`

	// RecipientType ITK RecipientType code (e.g., FI).
	RecipientType   *string `json:"recipientType,omitempty"`
	SenderReference *string `json:"senderReference,omitempty"`
}

// NarrativeBlock A free-text narrative section mapped to a ClinicalImpression resource with a Record Standard Headings tag.
type NarrativeBlock struct {
	// HeadingCode Record Standard Headings code (e.g. clinical-summary, history).
	HeadingCode NarrativeBlockHeadingCode `json:"headingCode"`

	// HeadingDisplay Human readable heading text.
	HeadingDisplay *string `json:"headingDisplay,omitempty"`

	// Text Narrative body.
	Text string `json:"text"`
}

// NarrativeBlockHeadingCode Record Standard Headings code (e.g. clinical-summary, history).
type NarrativeBlockHeadingCode string

// ObservationComponent defines model for ObservationComponent.
type ObservationComponent struct {
	Code                 CodedItem  `json:"code"`
	ValueCodeableConcept *CodedItem `json:"valueCodeableConcept,omitempty"`
	ValueQuantity        *Quantity  `json:"valueQuantity,omitempty"`
}

// ObservationInput defines model for ObservationInput.
type ObservationInput struct {
	BodySite   *CodedItem              `json:"bodySite,omitempty"`
	Category   *CodedItem              `json:"category,omitempty"`
	Code       CodedItem               `json:"code"`
	Components *[]ObservationComponent `json:"components,omitempty"`

	// ContextEncounterRef Encounter UUID
	ContextEncounterRef string    `json:"contextEncounterRef"`
	EffectiveDateTime   time.Time `json:"effectiveDateTime"`

	// Id Client-supplied UUID to reference from Composition.section
	Id     string     `json:"id"`
	Issued *time.Time `json:"issued,omitempty"`

	// PerformerRef Practitioner UUID
	PerformerRef *string                `json:"performerRef,omitempty"`
	Status       ObservationInputStatus `json:"status"`

	// SubjectRef Patient UUID
	SubjectRef string `json:"subjectRef"`
}

// ObservationInputStatus defines model for ObservationInput.Status.
type ObservationInputStatus string

// Patient defines model for Patient.
type Patient struct {
	DateOfBirth openapi_types.Date `json:"dateOfBirth"`
	Gender      *PatientGender     `json:"gender,omitempty"`
	GivenName   *string            `json:"givenName,omitempty"`
	NhsNumber   string             `json:"nhsNumber"`

	// NhsNumberVerificationStatus CareConnect NHS Number Verification Status code (e.g., "01").
	NhsNumberVerificationStatus *string `json:"nhsNumberVerificationStatus,omitempty"`
	Postcode                    *string `json:"postcode,omitempty"`
	Surname                     string  `json:"surname"`
}

// PatientGender defines model for Patient.Gender.
type PatientGender string

// Provenance defines model for Provenance.
type Provenance struct {
	Author Author            `json:"author"`
	System *SystemProvenance `json:"system,omitempty"`
}

// Quantity defines model for Quantity.
type Quantity struct {
	Code   *string `json:"code,omitempty"`
	System *string `json:"system,omitempty"`
	Unit   *string `json:"unit,omitempty"`
	Value  float32 `json:"value"`
}

// Routing defines model for Routing.
type Routing struct {
	// RegisteredPracticeODS ODS code of the patientâ€™s registered practice.
	RegisteredPracticeODS string `json:"registeredPracticeODS"`
}

// SubmitAccepted defines model for SubmitAccepted.
type SubmitAccepted struct {
	Links *struct {
		Self   *string `json:"self,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"links,omitempty"`
	MeshMessageId *string               `json:"meshMessageId"`
	MessageId     *openapi_types.UUID   `json:"messageId,omitempty"`
	Status        *SubmitAcceptedStatus `json:"status,omitempty"`
}

// SubmitAcceptedStatus defines model for SubmitAccepted.Status.
type SubmitAcceptedStatus string

// SystemProvenance defines model for SystemProvenance.
type SystemProvenance struct {
	Asid *string `json:"asid,omitempty"`
	Name string  `json:"name"`
}

// UpdateRecordRequest Full payload; minimal must-haves are required.
type UpdateRecordRequest struct {
	// Attachments Optional attachments (become DocumentReference).
	Attachments     *[]Attachment   `json:"attachments,omitempty"`
	ClinicalSummary ClinicalSummary `json:"clinicalSummary"`

	// Composition Document-level metadata for the inner Composition.
	Composition *CompositionDetails `json:"composition,omitempty"`

	// Encounter Primary encounter. Ignored if `encounters` is supplied.
	Encounter *Encounter `json:"encounter,omitempty"`

	// Encounters Multiple encounters; one should be role=primary (first is used if none marked).
	Encounters           *[]EncounterWithRole  `json:"encounters,omitempty"`
	MessageHeaderOptions *MessageHeaderOptions `json:"messageHeaderOptions,omitempty"`

	// NarrativeSections Additional narrative sections (ClinicalImpressions) by Record Standard Heading.
	NarrativeSections *[]NarrativeBlock `json:"narrativeSections,omitempty"`

	// Observations Observation resources referenced from Composition.section.
	Observations *[]ObservationInput `json:"observations,omitempty"`
	Patient      Patient             `json:"patient"`
	Provenance   Provenance          `json:"provenance"`
	Routing      Routing             `json:"routing"`
}

// SubmitUpdateRecordParams defines parameters for SubmitUpdateRecord.
type SubmitUpdateRecordParams struct {
	// IdempotencyKey Idempotency token; same key+body returns the original result.
	IdempotencyKey *string `json:"Idempotency-Key,omitempty"`

	// XCorrelationID Optional correlation id echoed in logs and responses.
	XCorrelationID *string `json:"X-Correlation-ID,omitempty"`
}

// SubmitUpdateRecordJSONRequestBody defines body for SubmitUpdateRecord for application/json ContentType.
type SubmitUpdateRecordJSONRequestBody = UpdateRecordRequest
