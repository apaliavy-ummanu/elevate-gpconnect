// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
