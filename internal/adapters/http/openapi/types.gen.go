// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ClinicalImpressionStatus.
const (
	Completed      ClinicalImpressionStatus = "completed"
	EnteredInError ClinicalImpressionStatus = "entered-in-error"
	InProgress     ClinicalImpressionStatus = "in-progress"
)

// Defines values for EncounterStatus.
const (
	Finished EncounterStatus = "finished"
	Unknown  EncounterStatus = "unknown"
)

// Defines values for EncounterParticipantRole.
const (
	PART EncounterParticipantRole = "PART"
	PPRF EncounterParticipantRole = "PPRF"
	REC  EncounterParticipantRole = "REC"
)

// Defines values for ErrorResponseErrorCode.
const (
	FHIRVALIDATIONFAILED ErrorResponseErrorCode = "FHIR_VALIDATION_FAILED"
	IDEMPOTENCYCONFLICT  ErrorResponseErrorCode = "IDEMPOTENCY_CONFLICT"
	MESHUPSTREAMERROR    ErrorResponseErrorCode = "MESH_UPSTREAM_ERROR"
	SENDTIMEOUT          ErrorResponseErrorCode = "SEND_TIMEOUT"
	SERVICEUNAVAILABLE   ErrorResponseErrorCode = "SERVICE_UNAVAILABLE"
	VALIDATIONERROR      ErrorResponseErrorCode = "VALIDATION_ERROR"
)

// Defines values for MeshMessageStatus.
const (
	Delivered MeshMessageStatus = "delivered"
	Failed    MeshMessageStatus = "failed"
	Queued    MeshMessageStatus = "queued"
)

// ClinicalImpression A concise assessment/impression from the consultation (FHIR STU3-like subset).
// # CHANGE: New schema; optional in request but recommended for clinical value.
type ClinicalImpression struct {
	// Description Longer free-text narrative if needed.
	Description *string `json:"description,omitempty"`

	// Effective A time period defined by a start and end datetime.
	// - If only `start` → period is ongoing from that date.
	// - If only `end` → period is prior to that date.
	// - If both present → `end` MUST NOT be before `start` (server-side validation).
	Effective *Period `json:"effective,omitempty"`

	// Finding Positive/negative findings relevant to the impression.
	Finding *[]ClinicalImpressionFinding `json:"finding,omitempty"`

	// Problem Problems/conditions considered (e.g., SNOMED).
	Problem *[]CodeableConcept `json:"problem,omitempty"`

	// Status Workflow status for the impression (mapped to FHIR).
	Status *ClinicalImpressionStatus `json:"status,omitempty"`

	// Summary Short narrative summary of clinical impression/assessment.
	Summary *string `json:"summary,omitempty"`
}

// ClinicalImpressionStatus Workflow status for the impression (mapped to FHIR).
type ClinicalImpressionStatus string

// ClinicalImpressionFinding defines model for ClinicalImpressionFinding.
type ClinicalImpressionFinding struct {
	// Basis Evidence or rationale for the finding.
	Basis *string `json:"basis,omitempty"`

	// Item Minimised CodeableConcept variant for common coded fields.
	Item CodeableConcept `json:"item"`
}

// CodeableConcept Minimised CodeableConcept variant for common coded fields.
type CodeableConcept struct {
	// Code Code in the specified system.
	Code string `json:"code"`

	// Display Human-readable display for the code.
	Display *string `json:"display,omitempty"`

	// System Coding system (e.g., http://snomed.info/sct)
	System string `json:"system"`
}

// CodedItem Convenience type for places where CodeableConcept-or-text is acceptable.
// If `text` is present, it can be used as narrative when code is unavailable.
type CodedItem struct {
	Code    string  `json:"code"`
	Display *string `json:"display,omitempty"`
	System  string  `json:"system"`
	Text    *string `json:"text,omitempty"`
}

// CompositionDetails Document-level metadata for the inner Composition.
type CompositionDetails struct {
	// Title Optional document title presented to recipients.
	Title *string `json:"title,omitempty"`

	// Type Convenience type for places where CodeableConcept-or-text is acceptable.
	// If `text` is present, it can be used as narrative when code is unavailable.
	Type CodedItem `json:"type"`
}

// Encounter Context of the consultation.
type Encounter struct {
	// Class Optional high-level class (e.g., outpatient, virtual). Free text; server maps if needed.
	Class *string `json:"class,omitempty"`

	// EncounterType Minimised CodeableConcept variant for common coded fields.
	EncounterType CodeableConcept `json:"encounterType"`

	// Identifier A business identifier (FHIR-like). Examples:
	// - SDS User ID: https://fhir.nhs.uk/Id/sds-user-id
	// - ODS Org Code: https://fhir.nhs.uk/Id/ods-organization-code
	// - URN/UUID: urn:ietf:rfc:3986 (value = urn:uuid:...)
	Identifier Identifier `json:"identifier"`

	// Participants MUST include exactly one role=REC (recorder).
	// MAY include at most one role=PPRF (primary performer).
	// Others MUST be role=PART.
	// (Server-side cardinality validation.)
	Participants []EncounterParticipant `json:"participants"`

	// PatientNhsNumber Redundant convenience field mirroring Patient.nhsNumber; server checks consistency.
	PatientNhsNumber string `json:"patientNhsNumber"`

	// Period A time period defined by a start and end datetime.
	// - If only `start` → period is ongoing from that date.
	// - If only `end` → period is prior to that date.
	// - If both present → `end` MUST NOT be before `start` (server-side validation).
	Period *Period `json:"period,omitempty"`

	// ServiceType Minimised CodeableConcept variant for common coded fields.
	ServiceType *CodeableConcept `json:"serviceType,omitempty"`

	// Status Minimal status set for Update Record context. Server may map to FHIR Encounter.status.
	Status EncounterStatus `json:"status"`
}

// EncounterStatus Minimal status set for Update Record context. Server may map to FHIR Encounter.status.
type EncounterStatus string

// EncounterParticipant defines model for EncounterParticipant.
type EncounterParticipant struct {
	// Individual Reference to a participant individual. Either provide your internal Practitioner id
	// or a business Identifier. Server resolves to Practitioner/RelatedPerson in FHIR.
	Individual IndividualRef `json:"individual"`

	// Period A time period defined by a start and end datetime.
	// - If only `start` → period is ongoing from that date.
	// - If only `end` → period is prior to that date.
	// - If both present → `end` MUST NOT be before `start` (server-side validation).
	Period *Period `json:"period,omitempty"`

	// Role REC = recorder (mandatory, exactly one);
	// PPRF = primary performer (optional, at most one);
	// PART = additional participant(s).
	Role EncounterParticipantRole `json:"role"`
}

// EncounterParticipantRole REC = recorder (mandatory, exactly one);
// PPRF = primary performer (optional, at most one);
// PART = additional participant(s).
type EncounterParticipantRole string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code ErrorResponseErrorCode `json:"code"`

		// Details Optional structured details for debugging/field-level errors.
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error"`
}

// ErrorResponseErrorCode defines model for ErrorResponse.Error.Code.
type ErrorResponseErrorCode string

// Identifier A business identifier (FHIR-like). Examples:
// - SDS User ID: https://fhir.nhs.uk/Id/sds-user-id
// - ODS Org Code: https://fhir.nhs.uk/Id/ods-organization-code
// - URN/UUID: urn:ietf:rfc:3986 (value = urn:uuid:...)
type Identifier struct {
	// System Identifier system URI.
	System string `json:"system"`

	// Value Identifier value assigned in that system.
	Value string `json:"value"`
}

// IndividualRef Reference to a participant individual. Either provide your internal Practitioner id
// or a business Identifier. Server resolves to Practitioner/RelatedPerson in FHIR.
type IndividualRef struct {
	union json.RawMessage
}

// IndividualRef0 defines model for .
type IndividualRef0 struct {
	// PractitionerId Your internal Practitioner id (or UUID used in this request bundle).
	PractitionerId string `json:"practitionerId"`
}

// IndividualRef1 defines model for .
type IndividualRef1 struct {
	// Identifier A business identifier (FHIR-like). Examples:
	// - SDS User ID: https://fhir.nhs.uk/Id/sds-user-id
	// - ODS Org Code: https://fhir.nhs.uk/Id/ods-organization-code
	// - URN/UUID: urn:ietf:rfc:3986 (value = urn:uuid:...)
	Identifier Identifier `json:"identifier"`
}

// MeshMessage defines model for MeshMessage.
type MeshMessage struct {
	// Attempts Number of delivery attempts performed.
	Attempts *int `json:"attempts,omitempty"`

	// Body The persisted FHIR STU3 Message Bundle (XML)
	Body *string `json:"body,omitempty"`

	// MessageId Server-assigned id for tracking.
	MessageId string `json:"messageId"`
	Routing   *struct {
		DestinationMeshMailboxId *string `json:"destinationMeshMailboxId,omitempty"`
		SenderOdsCode            *string `json:"senderOdsCode,omitempty"`
	} `json:"routing,omitempty"`

	// Status High-level lifecycle state.
	Status     MeshMessageStatus `json:"status"`
	Timestamps struct {
		CreatedAt time.Time `json:"createdAt"`
		UpdatedAt time.Time `json:"updatedAt"`
	} `json:"timestamps"`
}

// MeshMessageStatus High-level lifecycle state.
type MeshMessageStatus string

// Name Human name structure (subset of FHIR HumanName).
type Name struct {
	Family *string `json:"family,omitempty"`
	Given  *string `json:"given,omitempty"`
	Prefix *string `json:"prefix,omitempty"`

	// Text Full name rendered as text.
	Text *string `json:"text,omitempty"`

	// Use Name use (e.g., usual, official). Free text for POC; server may map to FHIR enum.
	Use *string `json:"use,omitempty"`
}

// Organisation defines model for Organisation.
type Organisation struct {
	// Identifier A business identifier (FHIR-like). Examples:
	// - SDS User ID: https://fhir.nhs.uk/Id/sds-user-id
	// - ODS Org Code: https://fhir.nhs.uk/Id/ods-organization-code
	// - URN/UUID: urn:ietf:rfc:3986 (value = urn:uuid:...)
	Identifier Identifier `json:"identifier"`

	// Name Legal/registered practice name.
	Name string `json:"name"`
}

// Patient defines model for Patient.
type Patient struct {
	// DateOfBirth ISO 8601 calendar date of birth.
	DateOfBirth openapi_types.Date `json:"dateOfBirth"`

	// Gender Administrative gender. Free text for POC; server maps to FHIR `male|female|other|unknown`.
	Gender *string `json:"gender,omitempty"`

	// Name Human name structure (subset of FHIR HumanName).
	Name Name `json:"name"`

	// NhsNumber NHS Number (10 digits). Modulus-11 check is enforced server-side.
	NhsNumber string `json:"nhsNumber"`
}

// Period A time period defined by a start and end datetime.
// - If only `start` → period is ongoing from that date.
// - If only `end` → period is prior to that date.
// - If both present → `end` MUST NOT be before `start` (server-side validation).
type Period struct {
	// End End time (inclusive).
	End *time.Time `json:"end,omitempty"`

	// Start Starting time (inclusive).
	Start *time.Time `json:"start,omitempty"`
}

// Practitioner defines model for Practitioner.
type Practitioner struct {
	// Gender Optional; same semantics as Patient.gender.
	Gender *string `json:"gender,omitempty"`

	// Identifier A business identifier (FHIR-like). Examples:
	// - SDS User ID: https://fhir.nhs.uk/Id/sds-user-id
	// - ODS Org Code: https://fhir.nhs.uk/Id/ods-organization-code
	// - URN/UUID: urn:ietf:rfc:3986 (value = urn:uuid:...)
	Identifier Identifier `json:"identifier"`

	// Name Human name structure (subset of FHIR HumanName).
	Name Name `json:"name"`
}

// Sender defines model for Sender.
type Sender struct {
	// OdsCode ODS organisation code of the sending practice (e.g., A12345).
	OdsCode string `json:"odsCode"`
}

// UpdateRecordRequest Full payload; minimal must-haves are required.
type UpdateRecordRequest struct {
	// ClinicalImpression A concise assessment/impression from the consultation (FHIR STU3-like subset).
	// # CHANGE: New schema; optional in request but recommended for clinical value.
	ClinicalImpression ClinicalImpression `json:"clinicalImpression"`

	// Composition Document-level metadata for the inner Composition.
	Composition CompositionDetails `json:"composition"`

	// Encounter Context of the consultation.
	Encounter    Encounter    `json:"encounter"`
	Organisation Organisation `json:"organisation"`
	Patient      Patient      `json:"patient"`
	Practitioner Practitioner `json:"practitioner"`
	Sender       Sender       `json:"sender"`
}

// SendFHIRMessageParams defines parameters for SendFHIRMessage.
type SendFHIRMessageParams struct {
	// XCorrelationID Optional correlation id echoed in logs and responses.
	XCorrelationID *string `json:"X-Correlation-ID,omitempty"`

	// IdempotencyKey An optional idempotency key. If a prior request with the same key succeeded,
	// the same 202 response is returned. If body differs → 409 is returned.
	IdempotencyKey *string `json:"Idempotency-Key,omitempty"`
}

// SendUpdateRecordMessageParams defines parameters for SendUpdateRecordMessage.
type SendUpdateRecordMessageParams struct {
	// XCorrelationID Optional correlation id echoed in logs and responses.
	XCorrelationID *string `json:"X-Correlation-ID,omitempty"`

	// IdempotencyKey An optional idempotency key. If a prior request with the same key succeeded,
	// the same 202 response is returned. If body differs → 409 is returned.
	IdempotencyKey *string `json:"Idempotency-Key,omitempty"`
}

// SendUpdateRecordMessageJSONRequestBody defines body for SendUpdateRecordMessage for application/json ContentType.
type SendUpdateRecordMessageJSONRequestBody = UpdateRecordRequest

// AsIndividualRef0 returns the union data inside the IndividualRef as a IndividualRef0
func (t IndividualRef) AsIndividualRef0() (IndividualRef0, error) {
	var body IndividualRef0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIndividualRef0 overwrites any union data inside the IndividualRef as the provided IndividualRef0
func (t *IndividualRef) FromIndividualRef0(v IndividualRef0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIndividualRef0 performs a merge with any union data inside the IndividualRef, using the provided IndividualRef0
func (t *IndividualRef) MergeIndividualRef0(v IndividualRef0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIndividualRef1 returns the union data inside the IndividualRef as a IndividualRef1
func (t IndividualRef) AsIndividualRef1() (IndividualRef1, error) {
	var body IndividualRef1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIndividualRef1 overwrites any union data inside the IndividualRef as the provided IndividualRef1
func (t *IndividualRef) FromIndividualRef1(v IndividualRef1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIndividualRef1 performs a merge with any union data inside the IndividualRef, using the provided IndividualRef1
func (t *IndividualRef) MergeIndividualRef1(v IndividualRef1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IndividualRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IndividualRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
